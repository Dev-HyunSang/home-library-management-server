// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/dev-hyunsang/home-library/lib/ent/book"
	"github.com/dev-hyunsang/home-library/lib/ent/schema"
	"github.com/dev-hyunsang/home-library/lib/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	bookFields := schema.Book{}.Fields()
	_ = bookFields
	// bookDescBookTitle is the schema descriptor for book_title field.
	bookDescBookTitle := bookFields[1].Descriptor()
	// book.BookTitleValidator is a validator for the "book_title" field. It is called by the builders before save.
	book.BookTitleValidator = bookDescBookTitle.Validators[0].(func(string) error)
	// bookDescAuthor is the schema descriptor for author field.
	bookDescAuthor := bookFields[2].Descriptor()
	// book.AuthorValidator is a validator for the "author" field. It is called by the builders before save.
	book.AuthorValidator = bookDescAuthor.Validators[0].(func(string) error)
	// bookDescRegisteredAt is the schema descriptor for registered_at field.
	bookDescRegisteredAt := bookFields[4].Descriptor()
	// book.DefaultRegisteredAt holds the default value on creation for the registered_at field.
	book.DefaultRegisteredAt = bookDescRegisteredAt.Default.(time.Time)
	// bookDescComplatedAt is the schema descriptor for complated_at field.
	bookDescComplatedAt := bookFields[5].Descriptor()
	// book.DefaultComplatedAt holds the default value on creation for the complated_at field.
	book.DefaultComplatedAt = bookDescComplatedAt.Default.(time.Time)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescNickName is the schema descriptor for nick_name field.
	userDescNickName := userFields[1].Descriptor()
	// user.NickNameValidator is a validator for the "nick_name" field. It is called by the builders before save.
	user.NickNameValidator = userDescNickName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[3].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[5].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
}
