// Code generated by ent, DO NOT EDIT.

package book

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dev-hyunsang/home-library/lib/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldID, id))
}

// BookTitle applies equality check predicate on the "book_title" field. It's identical to BookTitleEQ.
func BookTitle(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldBookTitle, v))
}

// Author applies equality check predicate on the "author" field. It's identical to AuthorEQ.
func Author(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthor, v))
}

// BookIsbn applies equality check predicate on the "book_isbn" field. It's identical to BookIsbnEQ.
func BookIsbn(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldBookIsbn, v))
}

// RegisteredAt applies equality check predicate on the "registered_at" field. It's identical to RegisteredAtEQ.
func RegisteredAt(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldRegisteredAt, v))
}

// ComplatedAt applies equality check predicate on the "complated_at" field. It's identical to ComplatedAtEQ.
func ComplatedAt(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldComplatedAt, v))
}

// BookTitleEQ applies the EQ predicate on the "book_title" field.
func BookTitleEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldBookTitle, v))
}

// BookTitleNEQ applies the NEQ predicate on the "book_title" field.
func BookTitleNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldBookTitle, v))
}

// BookTitleIn applies the In predicate on the "book_title" field.
func BookTitleIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldBookTitle, vs...))
}

// BookTitleNotIn applies the NotIn predicate on the "book_title" field.
func BookTitleNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldBookTitle, vs...))
}

// BookTitleGT applies the GT predicate on the "book_title" field.
func BookTitleGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldBookTitle, v))
}

// BookTitleGTE applies the GTE predicate on the "book_title" field.
func BookTitleGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldBookTitle, v))
}

// BookTitleLT applies the LT predicate on the "book_title" field.
func BookTitleLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldBookTitle, v))
}

// BookTitleLTE applies the LTE predicate on the "book_title" field.
func BookTitleLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldBookTitle, v))
}

// BookTitleContains applies the Contains predicate on the "book_title" field.
func BookTitleContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldBookTitle, v))
}

// BookTitleHasPrefix applies the HasPrefix predicate on the "book_title" field.
func BookTitleHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldBookTitle, v))
}

// BookTitleHasSuffix applies the HasSuffix predicate on the "book_title" field.
func BookTitleHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldBookTitle, v))
}

// BookTitleEqualFold applies the EqualFold predicate on the "book_title" field.
func BookTitleEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldBookTitle, v))
}

// BookTitleContainsFold applies the ContainsFold predicate on the "book_title" field.
func BookTitleContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldBookTitle, v))
}

// AuthorEQ applies the EQ predicate on the "author" field.
func AuthorEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldAuthor, v))
}

// AuthorNEQ applies the NEQ predicate on the "author" field.
func AuthorNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldAuthor, v))
}

// AuthorIn applies the In predicate on the "author" field.
func AuthorIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldAuthor, vs...))
}

// AuthorNotIn applies the NotIn predicate on the "author" field.
func AuthorNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldAuthor, vs...))
}

// AuthorGT applies the GT predicate on the "author" field.
func AuthorGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldAuthor, v))
}

// AuthorGTE applies the GTE predicate on the "author" field.
func AuthorGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldAuthor, v))
}

// AuthorLT applies the LT predicate on the "author" field.
func AuthorLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldAuthor, v))
}

// AuthorLTE applies the LTE predicate on the "author" field.
func AuthorLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldAuthor, v))
}

// AuthorContains applies the Contains predicate on the "author" field.
func AuthorContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldAuthor, v))
}

// AuthorHasPrefix applies the HasPrefix predicate on the "author" field.
func AuthorHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldAuthor, v))
}

// AuthorHasSuffix applies the HasSuffix predicate on the "author" field.
func AuthorHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldAuthor, v))
}

// AuthorEqualFold applies the EqualFold predicate on the "author" field.
func AuthorEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldAuthor, v))
}

// AuthorContainsFold applies the ContainsFold predicate on the "author" field.
func AuthorContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldAuthor, v))
}

// BookIsbnEQ applies the EQ predicate on the "book_isbn" field.
func BookIsbnEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldBookIsbn, v))
}

// BookIsbnNEQ applies the NEQ predicate on the "book_isbn" field.
func BookIsbnNEQ(v string) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldBookIsbn, v))
}

// BookIsbnIn applies the In predicate on the "book_isbn" field.
func BookIsbnIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldBookIsbn, vs...))
}

// BookIsbnNotIn applies the NotIn predicate on the "book_isbn" field.
func BookIsbnNotIn(vs ...string) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldBookIsbn, vs...))
}

// BookIsbnGT applies the GT predicate on the "book_isbn" field.
func BookIsbnGT(v string) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldBookIsbn, v))
}

// BookIsbnGTE applies the GTE predicate on the "book_isbn" field.
func BookIsbnGTE(v string) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldBookIsbn, v))
}

// BookIsbnLT applies the LT predicate on the "book_isbn" field.
func BookIsbnLT(v string) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldBookIsbn, v))
}

// BookIsbnLTE applies the LTE predicate on the "book_isbn" field.
func BookIsbnLTE(v string) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldBookIsbn, v))
}

// BookIsbnContains applies the Contains predicate on the "book_isbn" field.
func BookIsbnContains(v string) predicate.Book {
	return predicate.Book(sql.FieldContains(FieldBookIsbn, v))
}

// BookIsbnHasPrefix applies the HasPrefix predicate on the "book_isbn" field.
func BookIsbnHasPrefix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasPrefix(FieldBookIsbn, v))
}

// BookIsbnHasSuffix applies the HasSuffix predicate on the "book_isbn" field.
func BookIsbnHasSuffix(v string) predicate.Book {
	return predicate.Book(sql.FieldHasSuffix(FieldBookIsbn, v))
}

// BookIsbnIsNil applies the IsNil predicate on the "book_isbn" field.
func BookIsbnIsNil() predicate.Book {
	return predicate.Book(sql.FieldIsNull(FieldBookIsbn))
}

// BookIsbnNotNil applies the NotNil predicate on the "book_isbn" field.
func BookIsbnNotNil() predicate.Book {
	return predicate.Book(sql.FieldNotNull(FieldBookIsbn))
}

// BookIsbnEqualFold applies the EqualFold predicate on the "book_isbn" field.
func BookIsbnEqualFold(v string) predicate.Book {
	return predicate.Book(sql.FieldEqualFold(FieldBookIsbn, v))
}

// BookIsbnContainsFold applies the ContainsFold predicate on the "book_isbn" field.
func BookIsbnContainsFold(v string) predicate.Book {
	return predicate.Book(sql.FieldContainsFold(FieldBookIsbn, v))
}

// RegisteredAtEQ applies the EQ predicate on the "registered_at" field.
func RegisteredAtEQ(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldRegisteredAt, v))
}

// RegisteredAtNEQ applies the NEQ predicate on the "registered_at" field.
func RegisteredAtNEQ(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldRegisteredAt, v))
}

// RegisteredAtIn applies the In predicate on the "registered_at" field.
func RegisteredAtIn(vs ...time.Time) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldRegisteredAt, vs...))
}

// RegisteredAtNotIn applies the NotIn predicate on the "registered_at" field.
func RegisteredAtNotIn(vs ...time.Time) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldRegisteredAt, vs...))
}

// RegisteredAtGT applies the GT predicate on the "registered_at" field.
func RegisteredAtGT(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldRegisteredAt, v))
}

// RegisteredAtGTE applies the GTE predicate on the "registered_at" field.
func RegisteredAtGTE(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldRegisteredAt, v))
}

// RegisteredAtLT applies the LT predicate on the "registered_at" field.
func RegisteredAtLT(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldRegisteredAt, v))
}

// RegisteredAtLTE applies the LTE predicate on the "registered_at" field.
func RegisteredAtLTE(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldRegisteredAt, v))
}

// ComplatedAtEQ applies the EQ predicate on the "complated_at" field.
func ComplatedAtEQ(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldEQ(FieldComplatedAt, v))
}

// ComplatedAtNEQ applies the NEQ predicate on the "complated_at" field.
func ComplatedAtNEQ(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldNEQ(FieldComplatedAt, v))
}

// ComplatedAtIn applies the In predicate on the "complated_at" field.
func ComplatedAtIn(vs ...time.Time) predicate.Book {
	return predicate.Book(sql.FieldIn(FieldComplatedAt, vs...))
}

// ComplatedAtNotIn applies the NotIn predicate on the "complated_at" field.
func ComplatedAtNotIn(vs ...time.Time) predicate.Book {
	return predicate.Book(sql.FieldNotIn(FieldComplatedAt, vs...))
}

// ComplatedAtGT applies the GT predicate on the "complated_at" field.
func ComplatedAtGT(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldGT(FieldComplatedAt, v))
}

// ComplatedAtGTE applies the GTE predicate on the "complated_at" field.
func ComplatedAtGTE(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldGTE(FieldComplatedAt, v))
}

// ComplatedAtLT applies the LT predicate on the "complated_at" field.
func ComplatedAtLT(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldLT(FieldComplatedAt, v))
}

// ComplatedAtLTE applies the LTE predicate on the "complated_at" field.
func ComplatedAtLTE(v time.Time) predicate.Book {
	return predicate.Book(sql.FieldLTE(FieldComplatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasReviews applies the HasEdge predicate on the "reviews" edge.
func HasReviews() predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasReviewsWith applies the HasEdge predicate on the "reviews" edge with a given conditions (other predicates).
func HasReviewsWith(preds ...predicate.Review) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := newReviewsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBookmarks applies the HasEdge predicate on the "bookmarks" edge.
func HasBookmarks() predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BookmarksTable, BookmarksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBookmarksWith applies the HasEdge predicate on the "bookmarks" edge with a given conditions (other predicates).
func HasBookmarksWith(preds ...predicate.Bookmark) predicate.Book {
	return predicate.Book(func(s *sql.Selector) {
		step := newBookmarksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Book) predicate.Book {
	return predicate.Book(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Book) predicate.Book {
	return predicate.Book(sql.NotPredicates(p))
}
