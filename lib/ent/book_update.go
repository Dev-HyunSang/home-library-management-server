// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dev-hyunsang/home-library/lib/ent/book"
	"github.com/dev-hyunsang/home-library/lib/ent/predicate"
	"github.com/dev-hyunsang/home-library/lib/ent/user"
	"github.com/google/uuid"
)

// BookUpdate is the builder for updating Book entities.
type BookUpdate struct {
	config
	hooks    []Hook
	mutation *BookMutation
}

// Where appends a list predicates to the BookUpdate builder.
func (bu *BookUpdate) Where(ps ...predicate.Book) *BookUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetBookTitle sets the "book_title" field.
func (bu *BookUpdate) SetBookTitle(s string) *BookUpdate {
	bu.mutation.SetBookTitle(s)
	return bu
}

// SetNillableBookTitle sets the "book_title" field if the given value is not nil.
func (bu *BookUpdate) SetNillableBookTitle(s *string) *BookUpdate {
	if s != nil {
		bu.SetBookTitle(*s)
	}
	return bu
}

// SetAuthor sets the "author" field.
func (bu *BookUpdate) SetAuthor(s string) *BookUpdate {
	bu.mutation.SetAuthor(s)
	return bu
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (bu *BookUpdate) SetNillableAuthor(s *string) *BookUpdate {
	if s != nil {
		bu.SetAuthor(*s)
	}
	return bu
}

// SetBookIsbn sets the "book_isbn" field.
func (bu *BookUpdate) SetBookIsbn(i int) *BookUpdate {
	bu.mutation.ResetBookIsbn()
	bu.mutation.SetBookIsbn(i)
	return bu
}

// SetNillableBookIsbn sets the "book_isbn" field if the given value is not nil.
func (bu *BookUpdate) SetNillableBookIsbn(i *int) *BookUpdate {
	if i != nil {
		bu.SetBookIsbn(*i)
	}
	return bu
}

// AddBookIsbn adds i to the "book_isbn" field.
func (bu *BookUpdate) AddBookIsbn(i int) *BookUpdate {
	bu.mutation.AddBookIsbn(i)
	return bu
}

// ClearBookIsbn clears the value of the "book_isbn" field.
func (bu *BookUpdate) ClearBookIsbn() *BookUpdate {
	bu.mutation.ClearBookIsbn()
	return bu
}

// SetRegisteredAt sets the "registered_at" field.
func (bu *BookUpdate) SetRegisteredAt(t time.Time) *BookUpdate {
	bu.mutation.SetRegisteredAt(t)
	return bu
}

// SetNillableRegisteredAt sets the "registered_at" field if the given value is not nil.
func (bu *BookUpdate) SetNillableRegisteredAt(t *time.Time) *BookUpdate {
	if t != nil {
		bu.SetRegisteredAt(*t)
	}
	return bu
}

// SetComplatedAt sets the "complated_at" field.
func (bu *BookUpdate) SetComplatedAt(t time.Time) *BookUpdate {
	bu.mutation.SetComplatedAt(t)
	return bu
}

// SetNillableComplatedAt sets the "complated_at" field if the given value is not nil.
func (bu *BookUpdate) SetNillableComplatedAt(t *time.Time) *BookUpdate {
	if t != nil {
		bu.SetComplatedAt(*t)
	}
	return bu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (bu *BookUpdate) SetOwnerID(id uuid.UUID) *BookUpdate {
	bu.mutation.SetOwnerID(id)
	return bu
}

// SetOwner sets the "owner" edge to the User entity.
func (bu *BookUpdate) SetOwner(u *User) *BookUpdate {
	return bu.SetOwnerID(u.ID)
}

// Mutation returns the BookMutation object of the builder.
func (bu *BookUpdate) Mutation() *BookMutation {
	return bu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (bu *BookUpdate) ClearOwner() *BookUpdate {
	bu.mutation.ClearOwner()
	return bu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BookUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, bu.sqlSave, bu.mutation, bu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BookUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BookUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BookUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bu *BookUpdate) check() error {
	if v, ok := bu.mutation.BookTitle(); ok {
		if err := book.BookTitleValidator(v); err != nil {
			return &ValidationError{Name: "book_title", err: fmt.Errorf(`ent: validator failed for field "Book.book_title": %w`, err)}
		}
	}
	if v, ok := bu.mutation.Author(); ok {
		if err := book.AuthorValidator(v); err != nil {
			return &ValidationError{Name: "author", err: fmt.Errorf(`ent: validator failed for field "Book.author": %w`, err)}
		}
	}
	if bu.mutation.OwnerCleared() && len(bu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Book.owner"`)
	}
	return nil
}

func (bu *BookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeUUID))
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.BookTitle(); ok {
		_spec.SetField(book.FieldBookTitle, field.TypeString, value)
	}
	if value, ok := bu.mutation.Author(); ok {
		_spec.SetField(book.FieldAuthor, field.TypeString, value)
	}
	if value, ok := bu.mutation.BookIsbn(); ok {
		_spec.SetField(book.FieldBookIsbn, field.TypeInt, value)
	}
	if value, ok := bu.mutation.AddedBookIsbn(); ok {
		_spec.AddField(book.FieldBookIsbn, field.TypeInt, value)
	}
	if bu.mutation.BookIsbnCleared() {
		_spec.ClearField(book.FieldBookIsbn, field.TypeInt)
	}
	if value, ok := bu.mutation.RegisteredAt(); ok {
		_spec.SetField(book.FieldRegisteredAt, field.TypeTime, value)
	}
	if value, ok := bu.mutation.ComplatedAt(); ok {
		_spec.SetField(book.FieldComplatedAt, field.TypeTime, value)
	}
	if bu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.OwnerTable,
			Columns: []string{book.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.OwnerTable,
			Columns: []string{book.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bu.mutation.done = true
	return n, nil
}

// BookUpdateOne is the builder for updating a single Book entity.
type BookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BookMutation
}

// SetBookTitle sets the "book_title" field.
func (buo *BookUpdateOne) SetBookTitle(s string) *BookUpdateOne {
	buo.mutation.SetBookTitle(s)
	return buo
}

// SetNillableBookTitle sets the "book_title" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableBookTitle(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetBookTitle(*s)
	}
	return buo
}

// SetAuthor sets the "author" field.
func (buo *BookUpdateOne) SetAuthor(s string) *BookUpdateOne {
	buo.mutation.SetAuthor(s)
	return buo
}

// SetNillableAuthor sets the "author" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableAuthor(s *string) *BookUpdateOne {
	if s != nil {
		buo.SetAuthor(*s)
	}
	return buo
}

// SetBookIsbn sets the "book_isbn" field.
func (buo *BookUpdateOne) SetBookIsbn(i int) *BookUpdateOne {
	buo.mutation.ResetBookIsbn()
	buo.mutation.SetBookIsbn(i)
	return buo
}

// SetNillableBookIsbn sets the "book_isbn" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableBookIsbn(i *int) *BookUpdateOne {
	if i != nil {
		buo.SetBookIsbn(*i)
	}
	return buo
}

// AddBookIsbn adds i to the "book_isbn" field.
func (buo *BookUpdateOne) AddBookIsbn(i int) *BookUpdateOne {
	buo.mutation.AddBookIsbn(i)
	return buo
}

// ClearBookIsbn clears the value of the "book_isbn" field.
func (buo *BookUpdateOne) ClearBookIsbn() *BookUpdateOne {
	buo.mutation.ClearBookIsbn()
	return buo
}

// SetRegisteredAt sets the "registered_at" field.
func (buo *BookUpdateOne) SetRegisteredAt(t time.Time) *BookUpdateOne {
	buo.mutation.SetRegisteredAt(t)
	return buo
}

// SetNillableRegisteredAt sets the "registered_at" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableRegisteredAt(t *time.Time) *BookUpdateOne {
	if t != nil {
		buo.SetRegisteredAt(*t)
	}
	return buo
}

// SetComplatedAt sets the "complated_at" field.
func (buo *BookUpdateOne) SetComplatedAt(t time.Time) *BookUpdateOne {
	buo.mutation.SetComplatedAt(t)
	return buo
}

// SetNillableComplatedAt sets the "complated_at" field if the given value is not nil.
func (buo *BookUpdateOne) SetNillableComplatedAt(t *time.Time) *BookUpdateOne {
	if t != nil {
		buo.SetComplatedAt(*t)
	}
	return buo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (buo *BookUpdateOne) SetOwnerID(id uuid.UUID) *BookUpdateOne {
	buo.mutation.SetOwnerID(id)
	return buo
}

// SetOwner sets the "owner" edge to the User entity.
func (buo *BookUpdateOne) SetOwner(u *User) *BookUpdateOne {
	return buo.SetOwnerID(u.ID)
}

// Mutation returns the BookMutation object of the builder.
func (buo *BookUpdateOne) Mutation() *BookMutation {
	return buo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (buo *BookUpdateOne) ClearOwner() *BookUpdateOne {
	buo.mutation.ClearOwner()
	return buo
}

// Where appends a list predicates to the BookUpdate builder.
func (buo *BookUpdateOne) Where(ps ...predicate.Book) *BookUpdateOne {
	buo.mutation.Where(ps...)
	return buo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BookUpdateOne) Select(field string, fields ...string) *BookUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Book entity.
func (buo *BookUpdateOne) Save(ctx context.Context) (*Book, error) {
	return withHooks(ctx, buo.sqlSave, buo.mutation, buo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BookUpdateOne) SaveX(ctx context.Context) *Book {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BookUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BookUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (buo *BookUpdateOne) check() error {
	if v, ok := buo.mutation.BookTitle(); ok {
		if err := book.BookTitleValidator(v); err != nil {
			return &ValidationError{Name: "book_title", err: fmt.Errorf(`ent: validator failed for field "Book.book_title": %w`, err)}
		}
	}
	if v, ok := buo.mutation.Author(); ok {
		if err := book.AuthorValidator(v); err != nil {
			return &ValidationError{Name: "author", err: fmt.Errorf(`ent: validator failed for field "Book.author": %w`, err)}
		}
	}
	if buo.mutation.OwnerCleared() && len(buo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Book.owner"`)
	}
	return nil
}

func (buo *BookUpdateOne) sqlSave(ctx context.Context) (_node *Book, err error) {
	if err := buo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(book.Table, book.Columns, sqlgraph.NewFieldSpec(book.FieldID, field.TypeUUID))
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Book.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, book.FieldID)
		for _, f := range fields {
			if !book.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != book.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.BookTitle(); ok {
		_spec.SetField(book.FieldBookTitle, field.TypeString, value)
	}
	if value, ok := buo.mutation.Author(); ok {
		_spec.SetField(book.FieldAuthor, field.TypeString, value)
	}
	if value, ok := buo.mutation.BookIsbn(); ok {
		_spec.SetField(book.FieldBookIsbn, field.TypeInt, value)
	}
	if value, ok := buo.mutation.AddedBookIsbn(); ok {
		_spec.AddField(book.FieldBookIsbn, field.TypeInt, value)
	}
	if buo.mutation.BookIsbnCleared() {
		_spec.ClearField(book.FieldBookIsbn, field.TypeInt)
	}
	if value, ok := buo.mutation.RegisteredAt(); ok {
		_spec.SetField(book.FieldRegisteredAt, field.TypeTime, value)
	}
	if value, ok := buo.mutation.ComplatedAt(); ok {
		_spec.SetField(book.FieldComplatedAt, field.TypeTime, value)
	}
	if buo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.OwnerTable,
			Columns: []string{book.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   book.OwnerTable,
			Columns: []string{book.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Book{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{book.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	buo.mutation.done = true
	return _node, nil
}
